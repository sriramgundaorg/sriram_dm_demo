name: DataMiner CICD Automation

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
    tags: ['[0-9]+.[0-9]+.[0-9]+', 'v[0-9]+.[0-9]+.[0-9]+']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  CI:
    uses: SkylineCommunications/_ReusableWorkflows/.github/workflows/Automation Master Workflow.yml@main
    with:
      referenceName: ${{ github.ref_name }}
      runNumber: ${{ github.run_number }}
      referenceType: ${{ github.ref_type }}
      repository: ${{ github.repository }}
      owner: ${{ github.repository_owner }}
      sonarCloudProjectName: sriramgundaorg_sriram_dm_demo
    secrets:
      # The API-key: generated in the DCP Admin app (https://admin.dataminer.services/) as authentication for a certain DataMiner System.
      api-key: ${{ secrets.DM_TEST_THREE }}
      sonarCloudToken: ${{ secrets.SONAR_KEY }}
      
  LOG:
    environment: production
    name: LOG
    runs-on: ubuntu-latest
    needs: CI
    steps:
      - name: Post Actions
        run: echo  ArtifactId ${{ needs.CI.outputs.artifact-id }}
    
  # # Optional 0 or More CD Jobs as needed
  CD:
    if: github.ref_type == 'tag'
    environment: production
    name: CD
    runs-on: ubuntu-latest
    needs: CI

    steps:
      - uses: actions/checkout@v3
      - name: Skyline DataMiner Deploy Action
        id: findSlnFile 
        uses: SkylineCommunications/Skyline-DataMiner-Deploy-Action@v1
        with:
          # Stage deploy
          stage: All
          # The API-key: generated in the DCP Admin app (https://admin.dataminer.services/) as authentication for a certain DataMiner System.
          api-key: ${{ secrets.DM_TEST_THREE }}
          # solution-path: ./${{ steps.findSlnFile.outputs.solutionFilePath }}
          solution-path: ./sriram_dm_demo.sln
          # Id of the uploaded artifact
          # artifact-id: ${{ needs.CI.outputs.artifact-id }}
          artifact-name: ${{ github.repository }} ${{ github.ref_name }}
          version: ${{ github.ref_name }}
